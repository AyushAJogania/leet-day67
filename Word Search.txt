#include <vector>
#include <string>

class Solution {
public:
    bool exist(std::vector<std::vector<char>>& board, std::string word) {
        if (word.empty()) return false;
        
        const int m = board.size();
        const int n = board[0].size();
        
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == word[0] && backtrack(board, word, i, j, 0)) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
private:
    bool backtrack(std::vector<std::vector<char>>& board, const std::string& word, int row, int col, int idx) {
        if (idx == word.size()) {
            return true; // We found the entire word
        }
        
        if (row < 0 || row >= board.size() || col < 0 || col >= board[0].size() || board[row][col] != word[idx]) {
            return false; // Out of bounds or mismatch
        }
        
        // Save the current character and mark it as visited
        char temp = board[row][col];
        board[row][col] = '#';
        
        // Explore adjacent cells
        bool found = (backtrack(board, word, row - 1, col, idx + 1) ||
                      backtrack(board, word, row + 1, col, idx + 1) ||
                      backtrack(board, word, row, col - 1, idx + 1) ||
                      backtrack(board, word, row, col + 1, idx + 1));
        
        // Restore the character and backtrack
        board[row][col] = temp;
        
        return found;
    }
};
